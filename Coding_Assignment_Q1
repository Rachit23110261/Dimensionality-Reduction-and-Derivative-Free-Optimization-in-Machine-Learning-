{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.12","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"nvidiaTeslaT4","dataSources":[{"sourceId":10881873,"sourceType":"datasetVersion","datasetId":6761658},{"sourceId":225107263,"sourceType":"kernelVersion"}],"dockerImageVersionId":30918,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":true}},"nbformat_minor":4,"nbformat":4,"cells":[{"source":"<a href=\"https://www.kaggle.com/code/rachitmehta01/codingassignment-q1?scriptVersionId=230562007\" target=\"_blank\"><img align=\"left\" alt=\"Kaggle\" title=\"Open in Kaggle\" src=\"https://kaggle.com/static/images/open-in-kaggle.svg\"></a>","metadata":{},"cell_type":"markdown"},{"cell_type":"code","source":"import numpy as np\nimport pandas as pd\n\n# Load dataset\nX_train = pd.read_csv(\"/kaggle/input/har-dataset/UCI HAR Dataset/UCI HAR Dataset/train/X_train.txt\", delim_whitespace=True, header=None).values\nY_train = pd.read_csv(\"/kaggle/input/har-dataset/UCI HAR Dataset/UCI HAR Dataset/train/y_train.txt\", delim_whitespace=True, header=None).values.ravel()  # Convert to 1D array\n\n# Define sliding window parameters\nwindow_size = 30\nstride = 25  \n\ndef segment_data(X, Y, window_size, stride):\n    segments = []\n    labels = []\n    \n    for i in range(0, len(X) - window_size, stride):  # Sliding window\n        segment = X[i: i + window_size]\n        label = np.bincount(Y[i: i + window_size]).argmax()  # Majority class\n        \n        segments.append(segment)\n        labels.append(label)\n    \n    return np.array(segments), np.array(labels)\n\nX_segments, Y_segments = segment_data(X_train, Y_train, window_size, stride)\nX_segments = X_segments[:, :, :3]\n\n\n# Print shape of segmented data\nprint(\"Segmented X shape:\", X_segments.shape)  # (num_segments, 128, num_features)\nprint(\"Segmented Y shape:\", Y_segments.shape)  # (num_segments,)\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-30T11:03:36.265359Z","iopub.execute_input":"2025-03-30T11:03:36.265726Z","iopub.status.idle":"2025-03-30T11:03:37.295388Z","shell.execute_reply.started":"2025-03-30T11:03:36.265694Z","shell.execute_reply":"2025-03-30T11:03:37.294327Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"%pip install fastdtw","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-30T11:03:37.296593Z","iopub.execute_input":"2025-03-30T11:03:37.296957Z","iopub.status.idle":"2025-03-30T11:03:40.541215Z","shell.execute_reply.started":"2025-03-30T11:03:37.296925Z","shell.execute_reply":"2025-03-30T11:03:40.540174Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"from fastdtw import fastdtw\nfrom scipy.spatial.distance import euclidean\nimport numpy as np\n\ndef compute_dtw_matrix(X):\n    n = len(X)\n    dtw_matrix = np.zeros((n, n))\n    \n    for i in range(n):\n        if(i%10==0):\n            print(i)\n        for j in range(i+1, n):  # Compute only upper triangle\n            distance, _ = fastdtw(X[i], X[j], dist=euclidean)\n            dtw_matrix[i, j] = distance\n            dtw_matrix[j, i] = distance  # Symmetric matrix\n    \n    return dtw_matrix\n\ndef compute_euclidean_matrix(X):\n    n = len(X)\n    euclidean_matrix = np.zeros((n, n))\n    \n    for i in range(n):\n        for j in range(i+1, n):  # Compute only upper triangle\n            distance = np.linalg.norm(X[i] - X[j])\n            euclidean_matrix[i, j] = distance\n            euclidean_matrix[j, i] = distance  # Symmetric matrix\n    \n    return euclidean_matrix\n\n\ndef construct_similarity_matrix(dtw_matrix, euclidean_matrix, alpha=0.5):\n    W = np.exp(-alpha * (dtw_matrix + euclidean_matrix))\n    return W\n\nprint(\"Computing DTW distance matrix...\")\ndtw_matrix = compute_dtw_matrix(X_segments)\nprint(\"Computing Euclidean distance matrix...\")\neuclidean_matrix = compute_euclidean_matrix(X_segments)\nprint(\"Constructing similarity matrix W...\")\nW = construct_similarity_matrix(dtw_matrix, euclidean_matrix)\n\nprint(\"Similarity matrix W shape:\", W.shape)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-30T11:03:40.543215Z","iopub.execute_input":"2025-03-30T11:03:40.543483Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"from scipy.linalg import eigh\ndef construct_diffusion_kernel(dtw_matrix, epsilon):\n    return np.exp(-dtw_matrix ** 2 / epsilon)\ndef compute_normalized_laplacian(K):\n    D = np.diag(K.sum(axis=1))  \n    D_inv_sqrt = np.linalg.inv(np.sqrt(D)) \n    L = np.eye(len(K)) - D_inv_sqrt @ K @ D_inv_sqrt\n    return L\ndef compute_diffusion_coordinates(L, num_coords=3):\n    eigvals, eigvecs = eigh(L)  \n    return eigvecs[:, 1:num_coords+1]  \nepsilon = np.median(dtw_matrix)\nK = construct_diffusion_kernel(dtw_matrix, epsilon)\nL = compute_normalized_laplacian(K)\ndiffusion_coords = compute_diffusion_coordinates(L, num_coords=10)\n\nprint(\"Diffusion Coordinates Shape:\", diffusion_coords.shape)","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"from sklearn.cluster import KMeans, DBSCAN\n\n# Apply K-Means\nnum_clusters = 6  # Choose based on data\nkmeans = KMeans(n_clusters=num_clusters, random_state=42, n_init=10)\nkmeans_labels = kmeans.fit_predict(diffusion_coords)\n\n# Apply DBSCAN\ndbscan = DBSCAN(eps=0.5, min_samples=5)\ndbscan_labels = dbscan.fit_predict(diffusion_coords)\n","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"from sklearn.metrics import adjusted_rand_score, silhouette_score\nkmeans_silhouette = silhouette_score(diffusion_coords, kmeans_labels)\nprint(f\"K-Means Silhouette Score: {kmeans_silhouette:.4f}\")\n\ndbscan_silhouette = silhouette_score(diffusion_coords, dbscan_labels)\nprint(f\"DBSCAN Silhouette Score: {dbscan_silhouette:.4f}\")","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"kmeans_ari = adjusted_rand_score(Y_segments, kmeans_labels)\ndbscan_ari = adjusted_rand_score(Y_segments, dbscan_labels)\nprint(f\"K-Means ARI: {kmeans_ari:.4f}\")\nprint(f\"DBSCAN ARI: {dbscan_ari:.4f}\")\n\n","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"import matplotlib.pyplot as plt\ndef plot_clusters(X, labels, title):\n    plt.figure(figsize=(8,6))\n    plt.scatter(X[:, 0], X[:, 1], c=labels, cmap='tab10', alpha=0.6)\n    plt.colorbar(label=\"Cluster Labels\")\n    plt.xlabel(\"Component 1\")\n    plt.ylabel(\"Component 2\")\n    plt.title(title)\n    plt.show()\nplot_clusters(diffusion_coords,kmeans_labels,\"K- means\")\nplot_clusters(diffusion_coords,dbscan_labels,\"DB Scan\")\n","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"import matplotlib.pyplot as plt\n\n# Scatter plot of diffusion embeddings\nplt.figure(figsize=(8,6))\nplt.scatter(diffusion_coords[:, 0], diffusion_coords[:, 1], c=kmeans_labels, cmap='viridis', alpha=0.6)\n\nplt.colorbar(label=\"Activity Labels\")\nplt.xlabel(\"Diffusion Component 1\")\nplt.ylabel(\"Diffusion Component 2\")\nplt.title(\"Diffusion Embeddings Color-Coded by Activity Labels\")\nplt.show()\n","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"import matplotlib.pyplot as plt\nfrom sklearn.decomposition import PCA\nfrom sklearn.manifold import TSNE\n\npca_segments = PCA(n_components=2).fit_transform(X_segments.reshape(len(X_segments), -1))\n\ntsne_segments = TSNE(n_components=2, random_state=42).fit_transform(X_segments.reshape(len(X_segments), -1))\n\ndef plot_low_dim_embedding(embedding, labels, title):\n    plt.figure(figsize=(8, 6))\n    scatter = plt.scatter(embedding[:, 0], embedding[:, 1], cmap='tab10')\n    plt.colorbar(scatter, label=\"Activity Labels\")\n    plt.xlabel(\"Component 1\")\n    plt.ylabel(\"Component 2\")\n    plt.title(title)\n    plt.show()\n\nplot_low_dim_embedding(pca_segments, Y_segments, \"PCA Embedding of Time-Series Segments\")\nplot_low_dim_embedding(tsne_segments, Y_segments, \"t-SNE Embedding of Time-Series Segments\")\nplot_low_dim_embedding(diffusion_coords, Y_segments, \"Diffusion Maps Embedding of Time-Series Segments\")\n","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"kmeans_raw = KMeans(n_clusters=6, random_state=120, n_init=10).fit_predict(X_segments.reshape(len(X_segments), -1))\nplot_clusters(X_segments.reshape(len(X_segments), -1), kmeans_raw, \"K-Means Clustering on Raw Features\")","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"\nkmeans_pca = KMeans(n_clusters=6, random_state=42, n_init=10).fit_predict(pca_segments)\nplot_clusters(pca_segments, kmeans_pca, \"K-Means Clustering on PCA-Reduced Data\")\n","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"\nkmeans_tsne = KMeans(n_clusters=6, random_state=42, n_init=10).fit_predict(tsne_segments)\nplot_clusters(tsne_segments, kmeans_tsne, \"K-Means Clustering on t-SNE Transformed Data\")\n","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"plot_clusters(diffusion_coords, kmeans_labels, \"K-Means Clustering on t-SNE Transformed Data\")","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"from sklearn.metrics import silhouette_score\n\nsil_scores = {\n    \"Raw Features\": silhouette_score(X_segments.reshape(len(X_segments), -1), kmeans_raw),\n    \"PCA\": silhouette_score(pca_segments, kmeans_pca),\n    \"t-SNE\": silhouette_score(tsne_segments, kmeans_tsne),\n    \"Diffusion Maps\": silhouette_score(diffusion_coords, kmeans_labels),\n}\n\nfor method, score in sil_scores.items():\n    print(f\"{method} Silhouette Score: {score:.4f}\")\n","metadata":{"trusted":true},"outputs":[],"execution_count":null}]}